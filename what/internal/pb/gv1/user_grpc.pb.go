// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: pb/gv1/user.proto

package gv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WhatUserPart_UserSinup_FullMethodName = "/gv1.WhatUserPart/UserSinup"
	WhatUserPart_UserLogin_FullMethodName = "/gv1.WhatUserPart/UserLogin"
)

// WhatUserPartClient is the client API for WhatUserPart service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WhatUserPartClient interface {
	UserSinup(ctx context.Context, in *SinupRequest, opts ...grpc.CallOption) (*SinupResponse, error)
	UserLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type whatUserPartClient struct {
	cc grpc.ClientConnInterface
}

func NewWhatUserPartClient(cc grpc.ClientConnInterface) WhatUserPartClient {
	return &whatUserPartClient{cc}
}

func (c *whatUserPartClient) UserSinup(ctx context.Context, in *SinupRequest, opts ...grpc.CallOption) (*SinupResponse, error) {
	out := new(SinupResponse)
	err := c.cc.Invoke(ctx, WhatUserPart_UserSinup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whatUserPartClient) UserLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, WhatUserPart_UserLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WhatUserPartServer is the server API for WhatUserPart service.
// All implementations must embed UnimplementedWhatUserPartServer
// for forward compatibility
type WhatUserPartServer interface {
	UserSinup(context.Context, *SinupRequest) (*SinupResponse, error)
	UserLogin(context.Context, *LoginRequest) (*LoginResponse, error)
	mustEmbedUnimplementedWhatUserPartServer()
}

// UnimplementedWhatUserPartServer must be embedded to have forward compatible implementations.
type UnimplementedWhatUserPartServer struct {
}

func (UnimplementedWhatUserPartServer) UserSinup(context.Context, *SinupRequest) (*SinupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSinup not implemented")
}
func (UnimplementedWhatUserPartServer) UserLogin(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedWhatUserPartServer) mustEmbedUnimplementedWhatUserPartServer() {}

// UnsafeWhatUserPartServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WhatUserPartServer will
// result in compilation errors.
type UnsafeWhatUserPartServer interface {
	mustEmbedUnimplementedWhatUserPartServer()
}

func RegisterWhatUserPartServer(s grpc.ServiceRegistrar, srv WhatUserPartServer) {
	s.RegisterService(&WhatUserPart_ServiceDesc, srv)
}

func _WhatUserPart_UserSinup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SinupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhatUserPartServer).UserSinup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhatUserPart_UserSinup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhatUserPartServer).UserSinup(ctx, req.(*SinupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhatUserPart_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhatUserPartServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhatUserPart_UserLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhatUserPartServer).UserLogin(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WhatUserPart_ServiceDesc is the grpc.ServiceDesc for WhatUserPart service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WhatUserPart_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gv1.WhatUserPart",
	HandlerType: (*WhatUserPartServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserSinup",
			Handler:    _WhatUserPart_UserSinup_Handler,
		},
		{
			MethodName: "UserLogin",
			Handler:    _WhatUserPart_UserLogin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/gv1/user.proto",
}
